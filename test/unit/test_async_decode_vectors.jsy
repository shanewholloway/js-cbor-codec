const { assert } = require('chai')
import test_vectors_base from './appendix_a.jsy'
import test_vectors_float16 from './appendix_a_float16.jsy'
import test_vectors_float32 from './appendix_a_float32.jsy'

const test_vectors = [].concat @
  test_vectors_base
  test_vectors_float16
  test_vectors_float32

import { hex_to_u8, u8_to_hex } from 'u8-utils'
import float16 from 'cbor-codec/esm/float16.mjs'
import { CBORAsyncDecoderBasic } from 'cbor-codec'


function tag_as_diagnostic(decoder, tag) ::
  return v => `${tag}(${JSON.stringify(v)})`

function tag_as_hex_diagnostic(decoder, tag) ::
  return v => `${tag}(${v})`

const testing_tags = new Map()
testing_tags.set @ 0, tag_as_diagnostic // Standard date/time string
testing_tags.set @ 1, tag_as_diagnostic // Epoch-based date/time
testing_tags.set @ 2, tag_as_hex_diagnostic // Positive bignum
testing_tags.set @ 3, tag_as_hex_diagnostic // Negative bignum
testing_tags.set @ 23, tag_as_hex_diagnostic // Expected conversion to base16 encoding
testing_tags.set @ 24, tag_as_hex_diagnostic // Encoded CBOR data item
testing_tags.set @ 32, tag_as_diagnostic // URI

function u8_as_stream(u8) ::
  return u8

const CBORAsyncDecoder = CBORAsyncDecoderBasic.options @:
  tags: testing_tags
  types: @{}
    float16
    bytes(u8) :: return `h'${u8_to_hex(u8)}'`
    bytes_stream(u8) ::
      const res = []
      diag.done = @=> `(_ ${res.join(', ')})`
      return diag

      function diag(i, h_u8) :: res.push(h_u8)

describe @ 'Async Decode CBOR Test Vectors', @=> ::
  for const test of test_vectors ::

    const it_fn = test.skip ? it.skip : test.only ? it.only : it
    it_fn @ `"${test.hex}" to ${test.diagnostic || JSON.stringify(test.decoded)}`, @::>
      const u8 = hex_to_u8 @ test.hex

      const ans = await CBORAsyncDecoder.decode_stream(u8_as_stream(u8))
      if test.diagnostic ::
        try ::
          assert.equal @ test.diagnostic, ans+''
        catch err ::
          console.log @# 'diag', test.diagnostic, ans
          throw err
      else ::
        try ::
          assert.deepEqual @ test.decoded, ans
        catch err ::
          console.log @# 'decode', test.decoded, ans
          throw err

