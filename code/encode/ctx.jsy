import { utf8_to_u8, as_u8_buffer, u8_concat } from '../u8_utils.jsy'
import { bind_encode_dispatch } from './jump.jsy'

const W0=0, W1=24, W2=25, W4=26, W8=27

const ctx_prototype = /* #__PURE__ */ @{}
    __proto__: null,

    // encode(v) -- installed in bind_encode_dispatch (./jump.jsy)
    // encode_object(v) -- installed in bind_encode_dispatch (./jump.jsy)

    // raw_frame,
    // add_w0, add_w1, add_mask, add_int,
    // add_bytes, add_utf8, add_buffer,
    // float16_short, float32 float64

    invalid() :: this.add_w0(0xf7)

    simple(v) ::
      // RFC 8949 Simple Values; CBOR Simple Values Registry
      if v < 24 ::
        this.add_w0(0xe0 | v)
      else if v <= 0xff ::
        this.add_w1(0xf8, v)
      else throw new Error @ `Invalid simple value: ${v}`

    tag_encode(tag, value) ::
      let end_tag = this.tag(tag)
      this.encode(value)
      return end_tag()

    tag_encode_object(tag, value) ::
      let end_tag = this.tag(tag)
      this.encode_object(value)
      return end_tag()

    tag(tag, with_tag) ::
      if true === tag :: tag = 0xd9f7 // CBOR tag
      this.add_mask(0xc0, tag)
      return with_tag || this.host.with_tag(tag)


    shared_tag(obj_key) ::
      let refs = this._ref_wm
      let ref_id = refs.get(obj_key)
      if undefined === ref_id ::
        // new reference
        ref_id = refs.n++
        refs.set(obj_key, ref_id)
        return this.tag(28)

      else ::
        // existing new reference
        this.add_mask(0xc0, 29)
        this.add_int(ref_id)

    shared(obj_key, value=obj_key) ::
      let end_tag = this.shared_tag(obj_key)
      if undefined !== end_tag ::
        this.encode(value)
        return end_tag()

    shared_object(obj_key, value=obj_key) ::
      let end_tag = this.shared_tag(obj_key)
      if undefined !== end_tag ::
        this.encode_object(value)
        return end_tag()


    add_int(v) ::
      if ! Number.isSafeInteger(v) ::
        throw new TypeError()
      if v > 0 :: this.add_mask(0x00, v) // pos int
      else if v < 0 :: this.add_mask(0x20, -1 - v) // neg int
      else :: this.add_w0(0) // int zero

    sub_encode(v, opt) ::
      // lazy bind sub_encode on first use
      let fn = this.sub_encode =
        bind_encoder_context()
          .rebind(this.host)
      return fn(v, opt)

    nest(v, u8_pre) ::
      let end_tag = this.tag(24)
      this.add_buffer @ 0x40,
        u8_pre || this.sub_encode(v)
      return end_tag()

    bytes_stream(iterable) ::
      let {add_w0, add_bytes} = this
      add_w0(0x5f) // bytes stream
      for let v of iterable ::
        add_bytes(v)
      add_w0(0xff) // break

    utf8_stream(iterable) ::
      let {add_w0, add_utf8} = this
      add_w0(0x7f) // utf8 stream
      for let v of iterable ::
        add_utf8(v)
      add_w0(0xff) // break


    array(arr) ::
      let {add_mask, encode} = this
      let len = arr.length
      add_mask(0x80, len)

      for let i=0; i<len; i++ ::
        encode(arr[i])

    list(iterable, count) ::
      let {add_mask, encode} = this
      add_mask(0x80, count)

      for let v of iterable ::
        encode(v)

        if 0 >= count -- ::
          return

    list_stream(iterable) ::
      let {add_w0, encode} = this
      add_w0(0x9f) // list stream

      for let v of iterable ::
        encode(v)

      add_w0(0xff) // break


    _object_filter(e) ::
      let t = typeof e[1]
      return 'function' !== t && 'symbol' !== t

    object_pairs(v) ::
      let {add_mask, encode} = this
      let ns = Object.entries(v).filter(this._object_filter)
      let count = ns.length

      add_mask(0xa0, count)
      for let i=0; i<count; i++ ::
        let e = ns[i]
        encode(e[0])
        encode(e[1])


    pairs(iterable, count) ::
      let {add_mask, encode} = this
      add_mask(0xa0, count)

      for let e of iterable ::
        encode(e[0])
        encode(e[1])

        if 0 >= count -- ::
          return

    pair_stream(iterable) ::
      let {add_w0, encode} = this
      add_w0(0xbf) // map stream

      for let e of iterable ::
        encode(e[0])
        encode(e[1])

      add_w0(0xff) // break



export function bind_encoder_context(stream) ::
  let idx_frame = 0, idx_next = 0
  if null == stream ::
    stream = u8concat_outstream()
  else if !stream.flush && stream[Symbol.asyncIterator] ::
    stream = aiter_outstream(stream)

  const block_size = stream.block_size || 65536
  const u8_tip = new Uint8Array(block_size)
  const dv_tip = new DataView(u8_tip.buffer)

  const ctx = @{}
    __proto__: ctx_prototype

    raw_frame

    add_w0(bkind) ::
      next_frame(bkind, 1)

    add_w1(bkind, v8) ::
      u8_tip[ next_frame(bkind, 2) ] = v8

    add_mask
    add_bytes
    add_utf8
    add_buffer

    float16_short(u16) ::
      dv_tip.setUint16 @ next_frame(0xf9, 3), v

    float32(v) ::
      dv_tip.setFloat32 @ next_frame(0xfa, 5), v

    float64(v) ::
      dv_tip.setFloat64 @ next_frame(0xfb, 9), v


  bind_encode_dispatch(ctx, cbor_encode)
  return cbor_encode

  function cbor_encode(v, opt) ::
    // reset shim for shared references (hack)
    ;(ctx._ref_wm = new WeakMap()).n=0

    if undefined === opt || null === opt ::
      ctx.encode(v)
    else if true === opt || 'number' === typeof opt ::
      ctx.tag_encode(opt, v)
    else if opt.tag ::
      ctx.tag_encode(opt.tag, v)

    // flush complete cbor_encode op
    if idx_next === 0 ::
      return stream.flush(null)

    let blk = u8_tip.slice(0, idx_next)
    idx_frame = idx_next = 0
    return stream.flush(blk)




  function add_mask(mask, v) ::
    if v <= 0xffff ::
      if v < 24 :: // tiny
        next_frame(mask | v, 1)

      else if v <= 0xff ::
        u8_tip[ next_frame(mask | W1, 2) ] = v

      else ::
        dv_tip.setUint16 @ next_frame(mask | W2, 3), v

    else if v <= 0xffffffff ::
      dv_tip.setUint32 @ next_frame(mask | W4, 5), v

    else ::
      let idx = next_frame(mask | W8, 9)

      let v_hi = (v / 0x100000000) | 0
      dv_tip.setUint32(idx, v_hi)

      let v_lo = v & 0xffffffff
      dv_tip.setUint32(4+idx, v_lo)
      return

  function add_bytes(v) ::
    add_buffer @ 0x40, as_u8_buffer(v)

  function add_utf8(v) ::
    add_buffer @ 0x60, utf8_to_u8(v)

  function add_buffer(mask, buf) ::
    add_mask @ mask, buf.byteLength
    raw_frame(buf)


  // block paging

  function next_frame(bkind, frameWidth) ::
    idx_frame = idx_next; idx_next += frameWidth
    if idx_next > block_size ::
      stream.write @ u8_tip.slice(0, idx_frame)
      idx_frame = 0
      idx_next = frameWidth

    u8_tip[idx_frame] = bkind
    return 1 + idx_frame


  function raw_frame(buf) ::
    let len = buf.byteLength
    idx_frame = idx_next; idx_next += len
    if idx_next <= block_size ::
      u8_tip.set(buf, idx_frame)
      return

    if 0 !== idx_frame ::
      stream.write @ u8_tip.slice(0, idx_frame)

    idx_frame = idx_next = 0
    stream.write @ buf


export function u8concat_outstream() ::
  let blocks = []
  return @{}
    write(blk) :: blocks.push(blk)
    flush(blk) ::
      if 0 === blocks.length ::
        return blk

      if null !== blk ::
        blocks.push(blk)
      let u8 = u8_concat(blocks)
      blocks = []
      return u8


export function aiter_outstream(aiter_out) ::
  let _x_tail
  return @{}
    write(blk) ::
      _x_tail = aiter_out.next(blk)

    async flush(blk) ::
      let tail = (null !== blk)
        ? aiter_out.next(blk)
        : _x_tail

      _x_tail = null
      return await tail

