import { utf8_to_u8, as_u8_buffer, u8_concat } from '../u8_utils.jsy'
import { bind_encode_dispatch } from './jump.jsy'

const W0=0, W1=24, W2=25, W4=26, W8=27 

export const sym_cbor = Symbol('cbor')

const ctx_prototype = bind_ctx_prototype()

function bind_ctx_prototype() ::
  return @{}
    __proto__: null,

    // raw_frame, flush
    // add_w0, add_w1, add_int,
    // add_bytes, add_utf8, add_buffer,
    // float16_short, float32 float64

    tagEncode(tag, value) ::
      const end_tag = this.tag(tag)
      this.encode(value)
      return end_tag()

    tag(tag, withTag) ::
      if true === tag :: tag = 0xd9f7
      this.add_int(0xc0, tag)
      return withTag || this.host.withTag(tag)

    bytes_stream(iterable) ::
      const {add_w0, add_bytes} = this
      add_w0(0x5f) // bytes stream
      for const v of iterable ::
        add_bytes(v)
      add_w0(0xff) // break

    utf8_stream(iterable) ::
      const {add_w0, add_utf8} = this
      add_w0(0x7f) // utf8 stream
      for const v of iterable ::
        add_utf8(v)
      add_w0(0xff) // break


    array(arr) ::
      const {add_int, encode} = this
      const len = arr.length
      add_int(0x80, len)

      for let i=0; i<len; i++ ::
        encode(arr[i])

    list(iterable, count) ::
      const {add_int, encode} = this
      add_int(0x80, count)

      for const v of iterable ::
        encode(v)

        if 0 >= count -- ::
          break

    list_stream(iterable) ::
      const {add_w0, encode} = this
      add_w0(0x9f) // list stream

      for const v of iterable ::
        encode(v)

      add_w0(0xff) // break


    object_pairs(v) ::
      if undefined !== v[sym_cbor] ::
        return v[sym_cbor](ctx, v)

      const {add_int, encode} = this
      const ns = Object.entries(v)
      const count = ns.length

      add_int(0xa0, count)
      for let i=0; i<count; i++ ::
        const e = ns[i]
        encode(e[0])
        encode(e[1])


    pairs(iterable, count) ::
      const {add_int, encode} = this
      add_int(0xa0, count)

      for const [k,v] of iterable ::
        encode(k)
        encode(v)

        if 0 >= count -- ::
          break

    pair_stream(iterable) ::
      const {add_w0, encode} = this
      add_w0(0xbf) // map stream

      for const [k,v] of iterable ::
        encode(k)
        encode(v)

      add_w0(0xff) // break



export function bind_encoder_context(stream) ::
  const blockSize = 65536
  const u8_tip = new Uint8Array(blockSize)
  const dv_tip = new DataView(u8_tip.buffer)

  let idx_frame = 0, idx_next = 0
  if null == stream ::
    stream = u8concat_stream()

  const ctx = @{}
    __proto__: ctx_prototype
    raw_frame
    flush

    add_w0(bkind) ::
      next_frame(bkind, 1)

    add_w1(bkind, v8) ::
      u8_tip[ next_frame(bkind, 2) ] = v8

    add_int
    add_bytes
    add_utf8
    add_buffer

    float16_short(u16) ::
      dv_tip.setUint16 @ next_frame(0xf9, 3), v

    float32(v) ::
      dv_tip.setFloat32 @ next_frame(0xfa, 5), v

    float64(v) ::
      dv_tip.setFloat64 @ next_frame(0xfb, 9), v


  bind_encode_dispatch(ctx, cbor_encode)
  return cbor_encode

  function cbor_encode(v, opt) ::
    if undefined === opt || null === opt ::
      ctx.encode(v)
    else if true === opt || 'number' === typeof opt ::
      ctx.tagEncode(opt, v)
    else if opt.tag ::
      ctx.tagEncode(opt.tag, v)
    return ctx.flush()


  function add_int(mask, v) ::
    if v <= 0xffff ::
      if v < 24 :: // tiny
        next_frame(mask | v, 1)

      else if v <= 0xff ::
        u8_tip[ next_frame(mask | W1, 2) ] = v

      else ::
        dv_tip.setUint16 @ next_frame(mask | W2, 3), v

    else if v <= 0xffffffff ::
      dv_tip.setUint32 @ next_frame(mask | W4, 5), v

    else ::
      const idx = next_frame(mask | W8, 9)

      const v_hi = (v / 0x100000000) | 0
      dv_tip.setUint32(idx, v_hi)

      const v_lo = v & 0xffffffff
      dv_tip.setUint32(4+idx, v_lo)
      return

  function add_bytes(v) ::
    add_buffer @ 0x40, as_u8_buffer(v)

  function add_utf8(v) ::
    add_buffer @ 0x60, utf8_to_u8(v)

  function add_buffer(mask, buf) ::
    add_int @ mask, buf.byteLength
    raw_frame(buf)


  // block paging

  function next_frame(bkind, frameWidth) ::
    idx_frame = idx_next; idx_next += frameWidth

    u8_tip[idx_frame] = bkind
    if idx_next > blockSize ::
      stream.write @ u8_tip.slice(0, idx_frame)
      idx_frame = 0
      idx_next = frameWidth

    return 1 + idx_frame


  function raw_frame(buf) ::
    const len = buf.byteLength

    idx_frame = idx_next; idx_next += len
    if idx_next <= blockSize ::
      u8_tip.set(buf, idx_frame)
      return

    if 0 !== idx_frame ::
      stream.write @ u8_tip.slice(0, idx_frame), buf
      idx_frame = 0
      idx_next = len

    stream.write @ buf


  function flush() ::
    if idx_next !== 0 ::
      const blk = u8_tip.slice(0, idx_next)
      idx_frame = idx_next = 0
      return stream.flush(blk)
    else return stream.flush(null)



export function u8concat_stream() ::
  let blocks = []
  return @{}
    write(blk) :: blocks.push(blk)
    flush(blk) ::
      if 0 === blocks.length ::
        return blk

      blocks.push(blk)
      const u8 = u8_concat(blocks)
      blocks = []
      return u8

