import { cbor_encode_sym } from '../sym_cbor.jsy'

const _obj_kind_ = Function.call.bind @ Object.prototype.toString
// Like _obj_kind_ = (v) => ({}).toString.call(v) // but using precompiled attribute lookup and zero object allocations

export function bind_encode_dispatch(ctx, api) ::
  let simple_map, encode_object, lut_types

  ctx.encode = encode
  ctx.encode_object = v => encode_object(v, ctx)

  // rebind() binds the following: 
  //   - simple_map, encode_object, lut_types
  //   - '[object Object]' via lut_types.set @ _obj_kind_({}), encode_object
  api.rebind = rebind
  return

  function rebind(host) ::
    Object.defineProperties @ ctx, @{}
      host: {value: host}

    simple_map = host._simple_map
    lut_types = new Map(lut_common_types)

    for const [k,fn] of host._encoder_map.entries() ::
      if 'string' === typeof k && 'function' === typeof fn ::
        lut_types.set @ k, fn

    if host.bind_encode_object ::
      encode_object = host.bind_encode_object(ctx, lut_types)

    else if host.encode_object ::
      encode_object = host.encode_object

    if encode_object ::
      lut_types.set @ _obj_kind_({}), encode_object
    else encode_object = lut_types.get @ _obj_kind_({})


  function encode(v) ::
    // Lookup table for well-known values directly to CBOR zero-width encodings
    let ev = lut_fast_w0.get(v)
    if undefined !== ev ::
      ctx.add_w0(ev)
      return

    // Lookup table for "simple" special instances
    if undefined !== simple_map ::
      let simple = simple_map.get(v)
      if undefined !== simple ::
        if simple < 24 ::
          ctx.add_w0(0xe0 | simple)
        else if simple <= 0xff ::
          ctx.add_w1(0xf8, simple)
        else throw new Error @ `Invalid simple value: ${simple}`
        return

    if undefined !== v[cbor_encode_sym] ::
      v[cbor_encode_sym](ctx, v)
      return

    let encoder = lut_types.get @ _obj_kind_(v)
    if undefined !== encoder ::
      encoder(v, ctx)
      return

    // not '[object Object]', but also not handled explicitly. (e.g. [object Date])
    encode_object(v, ctx)



// lut_fast_w0 is a lookup table for well-known values directly to CBOR zero-width encodings
const lut_fast_w0 = new Map @#
  [ false, 244 ], [ true, 245 ],
  [ null, 246 ], [ undefined, 247 ],

  // pos w0 ints: [ 0, 0 ], [ 1, 1 ], [ 2, 2 ], [ 3, 3 ], [ 4, 4 ], [ 5, 5 ], [ 6, 6 ], [ 7, 7 ], [ 8, 8 ], [ 9, 9 ], [ 10, 10 ], [ 11, 11 ], [ 12, 12 ], [ 13, 13 ], [ 14, 14 ], [ 15, 15 ], [ 16, 16 ], [ 17, 17 ], [ 18, 18 ], [ 19, 19 ], [ 20, 20 ], [ 21, 21 ], [ 22, 22 ], [ 23, 23 ],
  ... Array.from @ {length:24}, (v,i) => [i, i]

  // neg w0 ints: [ -1, 32 ], [ -2, 33 ], [ -3, 34 ], [ -4, 35 ], [ -5, 36 ], [ -6, 37 ], [ -7, 38 ], [ -8, 39 ], [ -9, 40 ], [ -10, 41 ], [ -11, 42 ], [ -12, 43 ], [ -13, 44 ], [ -14, 45 ], [ -15, 46 ], [ -16, 47 ], [ -17, 48 ], [ -18, 49 ], [ -19, 50 ], [ -20, 51 ], [ -21, 52 ], [ -22, 53 ], [ -23, 54 ], [ -24, 55 ]
  ... Array.from @ {length:24}, (v,i) => [-i-1, 32+i]


// floating point encodings
const cu8_f32_nan = new Uint8Array @# 0xfa, 0x7f, 0xc0, 0, 0
const cu8_f32_neg_zero = new Uint8Array @# 0xfa, 0x80, 0, 0, 0
const lut_fp_raw = new Map @#
  @[] -0, cu8_f32_neg_zero
  @[] NaN, cu8_f32_nan
  @[] Infinity, new Uint8Array @# 0xfa, 0x7f, 0x80, 0, 0
  @[] -Infinity, new Uint8Array @# 0xfa, 0xff, 0x80, 0, 0


function encode_number(v, ctx) ::
  if ! Number.isSafeInteger(v) ::
    const raw = lut_fp_raw.get(v)
    if undefined === raw ::
      // floating point or very large numbers
      ctx.float64(v)

    else ::
      ctx.raw_frame(raw)

  else if v > 0 ::
    // pos int
    ctx.add_int(0x00, v)

  else if v < 0 ::
    // neg int
    ctx.add_int(0x20, -1 - v)

  else if Object.is(-0, v) ::
    // negative zero; does not play well with identity or Map() lookup
    ctx.raw_frame @ cu8_f32_neg_zero

  else ::
    // int zero
    ctx.add_w0(0)


export function use_encoder_for(lut_types, example, encoder) ::
  let kind = _obj_kind_(example)
  lut_types.set( kind, encoder )
  return kind


const lut_common_types = bind_builtin_types @ new Map()

export function bind_builtin_types(lut_types) ::
  use_encoder_for @ lut_types, NaN, (v, ctx) => :: ctx.raw_frame @ cu8_f32_nan
  use_encoder_for @ lut_types, undefined, (v, ctx) => :: ctx.add_w0(0xf7)
  use_encoder_for @ lut_types, null, (v, ctx) => :: ctx.add_w0(0xf6)
  use_encoder_for @ lut_types, true, (v, ctx) => :: ctx.add_w0(v ? 0xf5 : 0xf4)
  use_encoder_for @ lut_types, 'utf8', (v, ctx) => :: ctx.add_utf8(v)
  use_encoder_for @ lut_types, 42, encode_number
  use_encoder_for @ lut_types, 42.1, encode_number
  use_encoder_for @ lut_types, [], (v, ctx) => :: ctx.array(v)
  use_encoder_for @ lut_types, {}, (v, ctx) => :: ctx.object_pairs(v)

  use_encoder_for @ lut_types, parseInt, @=> ::
  use_encoder_for @ lut_types, Symbol.iterator, @=> ::


  :: // ArrayBuffer and friends
    const ab = new ArrayBuffer(0)
    function encode_bytes(v, ctx) :: ctx.add_bytes(v)
    use_encoder_for @ lut_types, ab, encode_bytes

    for const ArrayDataKlass of @[]
        Int8Array, Uint8Array, Uint8ClampedArray,
        Int16Array, Uint16Array, Int32Array, Uint32Array,
        Float32Array, Float64Array, DataView ::

      use_encoder_for @ lut_types, new ArrayDataKlass(ab), encode_bytes

  return lut_types

