import { CBOREncoder } from './index.jsy'
import { sym_cbor } from './ctx.jsy'

export * from './index.jsy'

const objProtoOf = Object.getPrototypeOf

export class CBOREncoderFull extends CBOREncoder ::
  bind_encode_object(/*ctx_outer, lut_types*/) ::
    const lut_encoders = this._encoder_map

    return enc_obj$full

    function enc_obj$full(v, ctx) ::
      // Lookup CBOR extension point via [sym_cbor]
      if undefined !== v[sym_cbor] ::
        v[sym_cbor](ctx, v)
        return true

      // Lookup .toJSON extension point
      if 'function' === typeof v.toJSON ::
        ctx.encode @ v.toJSON()
        return true


      // Lookup encoder using prototype
      ::
        // start with the constructor
        let tip = v, key=v.constructor
        do ::
          let encoder = lut_encoders.get(key)
          if undefined !== encoder ::
            encoder(v, ctx)
            return true

          // then the prototype chain
          key = tip = objProtoOf(tip)
        while null !== tip


      // Iterables become indefinite CBOR arrays
      if undefined !== v[Symbol.iterator] ::
        ctx.array_stream(v)
        return true

      ctx.object_pairs(v)
      return true

