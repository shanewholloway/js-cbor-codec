import { as_u8_buffer } from '../u8_utils.jsy'
import { cbor_done_sym, cbor_eoc_sym } from '../decode_common/u8ctx.jsy'
import { U8DecodeBaseCtx } from '../decode_common/u8ctx.jsy'

export class U8SyncDecodeCtx extends U8DecodeBaseCtx ::
  static bind_decode_api(decoder) ::
    decoder.decode = u8 =>
      this.from_u8(u8, decoder.types)
        .decode_cbor()

    decoder.iter_decode = u8 =>
      this.from_u8(u8, decoder.types)
        .iter_decode_cbor()


  static get from_u8() ::
    const inst0 = new this()

    return (u8, types) => ::
      u8 = as_u8_buffer(u8)
      const inst = @{}
        __proto__: inst0
        idx: 0, u8
        _apply_overlay: inst0._overlay_noop

      if types && types !== inst0.types ::
        inst.types = types
      return inst


  static bind_next_value(jmp, unknown) ::
    if null == unknown ::
      unknown = this._error_unknown

    return function next_value() ::
      const doneTypes = this._apply_overlay()

      const type_b = this.u8[ this.idx ++ ]
      if undefined === type_b ::
        this.idx--
        throw cbor_done_sym

      const decode = jmp[type_b] || unknown
      const res = decode(this, type_b)

      return undefined === doneTypes
        ? res : doneTypes(res)


  decode_cbor() ::
    try ::
      return this.next_value()
    catch e ::
      throw cbor_done_sym !== e ? e
        : new Error @ `End of content`


  *iter_decode_cbor() ::
    try ::
      while 1 ::
        yield this.next_value()
    catch e ::
      if cbor_done_sym !== e ::
        throw e


  move(count_bytes) ::
    const {idx, byteLength} = this
    const idx_next = idx + count_bytes
    if idx_next >= byteLength ::
      throw cbor_eoc_sym
    this.idx = idx_next
    return idx

