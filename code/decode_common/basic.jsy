import { decode_types } from './types.jsy'

export class CBORDecoderBase ::
  static decode(u8, opt) :: return new this().decode(u8, opt)
  static iter_decode(u8, opt) :: return new this().iter_decode(u8, opt)

  static options(options) ::
    return (class extends this {}).compile(options)

  static compile(options) ::
    this.prototype.compile(options)
    return this

  constructor(options) ::
    if null != options ::
      this.compile(options)

    this.decode = (u8, opt) =>
      this._ctxFromU8(u8, this.types).decode(opt)
    this.iter_decode = (u8, opt) =>
      this._ctxFromU8(u8, this.types).iter_decode(opt)

  compile(options) ::
    this.jmp = this._bind_cbor_jmp(options, this.jmp)

    if options.types ::
      this.types = Object.assign @
        Object.create(this.types || null),
        options.types

    const U8DecodeCtx_ = this._bind_u8ctx(
      this.types, this.jmp, options.unknown)
    this._ctxFromU8 = U8DecodeCtx_.fromU8

    return this

