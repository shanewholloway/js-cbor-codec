
export class U8DecodeBaseCtx ::

  static subclass(types, jmp, unknown) ::
    class U8DecodeCtx_ extends this ::
    let {prototype} = U8DecodeCtx_
    prototype.next_value = U8DecodeCtx_.bind_next_value(jmp, unknown)
    prototype.types = types
    return U8DecodeCtx_


  from_nested_u8(u8) ::
    return this.constructor
      .from_u8(u8, this.types)


  use_overlay(overlay_types) ::
    let {types, _apply_overlay, _overlay_noop} = this

    if _overlay_noop === _apply_overlay ::
      _apply_overlay = () => ::
        this.types = types

    this._apply_overlay = @=> ::
      this._apply_overlay = _apply_overlay
      this.types = overlay_types
    return types

  _error_unknown(ctx, type_b) ::
    throw new Error @ `No CBOR decorder regeistered for ${type_b} (0x${('0'+type_b.toString(16)).slice(-2)})`

  _overlay_noop() {}

  // Subclass responsibilities:
  //   static bind_decode_api(decoder)
  //   static bind_next_value(jmp, unknown) ::
  //   move(count_bytes) ::

  // Possible Subclass responsibilities:
  //   decode_cbor() ::
  //   *iter_decode_cbor() ::
  //   async decode_cbor() ::
  //   async * aiter_decode_cbor() ::


