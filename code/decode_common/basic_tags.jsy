import { cbor_accum, cbor_nest } from '../sym_cbor.jsy'
import {is_big_endian, cbor_typed_arrays, swap_endian} from '../typed_arrays.jsy'

export const decode_Map = @{}
  map:
    cbor_accum @:
      init: () => new Map()
      accum: (res, k, v) => res.set(k, v)

export const decode_Set = @{}
  list:
    cbor_accum @:
      init: () => new Set()
      accum: (res, i, v) => res.add(v)


export function std_tags(tags_lut) ::
  basic_tags(tags_lut)
  typedarray_tags(tags_lut)


export function basic_tags(tags_lut) ::
  // from https://tools.ietf.org/html/rfc7049#section-2.4

  // Standard date/time string; see Section 2.4.1
  tags_lut.set @ 0, () => ts_sz => new Date(ts_sz)
  // Epoch-based date/time; see Section 2.4.1
  tags_lut.set @ 1, () => seconds => new Date(seconds * 1000)

  // Positive bignum; see Section 2.4.2
  // tags_lut.set @ 2, () => v => v

  // Negative bignum; see Section 2.4.2
  // tags_lut.set @ 3, () => v => v

  // Decimal fraction; see Section 2.4.3
  // tags_lut.set @ 4, () => v => v

  // Bigfloat; see Section 2.4.3
  // tags_lut.set @ 5, () => v => v

  // Expected conversion to base64url encoding; see Section 2.4.4.2
  // tags_lut.set @ 21, () => v => v

  // Expected conversion to base64 encoding; see Section 2.4.4.2
  // tags_lut.set @ 22, () => v => v

  // Expected conversion to base16 encoding; see Section 2.4.4.2
  // tags_lut.set @ 23, () => v => v

  // Encoded CBOR data item; see Section 2.4.4.1
  tags_lut.set @ 24, ctx => cbor_nest.with_ctx(ctx)

  // URI; see Section 2.4.4.3
  tags_lut.set @ 32, () => url_sz => new URL(url_sz)

  // base64url; see Section 2.4.4.3
  //tags_lut.set @ 33, () => v => v

  // base64; see Section 2.4.4.3
  //tags_lut.set @ 34, () => v => v

  // Regular expression; see Section 2.4.4.3
  //tags_lut.set @ 35, () => v => v

  // MIME message; see Section 2.4.4.3
  //tags_lut.set @ 36, () => v => v

  // Self-describe CBOR; see Section 2.4.5
  tags_lut.set @ 55799, () => {}


  // EXTENSIONS

  // CBOR Sets https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
  tags_lut.set @ 258, ctx => { ctx.use_overlay(decode_Set) }

  // CBOR Maps https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-256-spec--explicit-maps.md
  tags_lut.set @ 259, ctx => { ctx.use_overlay(decode_Map) }

  return tags_lut


export function typedarray_tags(tags_lut) ::
  let [i_cpy, i_swp] = is_big_endian ? [1, 2] : [2, 1]
  for let ta_args of cbor_typed_arrays ::
    let TA_Klass = ta_args[0], step=TA_Klass.BYTES_PER_ELEMENT
    let as_ta = u8 =>
      0 === (u8.byteOffset % step) // if aligned, reuse buffer
        ? new TA_Klass(u8.buffer, u8.byteOffset, u8.byteLength / step)
        : new TA_Klass(u8.slice().buffer)

    tags_lut.set @ ta_args[i_cpy], ctx => as_ta
    tags_lut.set @ ta_args[i_swp], ctx => u8 => swap_endian @ as_ta(u8)

