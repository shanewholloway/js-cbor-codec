import { u8_to_utf8, u8_concat } from '../u8_utils.jsy'

export const decode_types = @{}
  __proto__: null

  nested_cbor(u8, ctx) ::
    ctx = ctx.from_nested_u8(u8)
    u8.decode_cbor = () => ctx.decode_cbor()
    return u8

  u32(u8, idx) ::
    const u32 = (u8[idx] << 24) | (u8[idx+1] << 16) | (u8[idx+2] << 8) | u8[idx+3]
    return u32 >>> 0 // unsigned int32

  u64(u8, idx) ::
    const v_hi = (u8[idx] << 24) | (u8[idx+1] << 16) | (u8[idx+2] << 8) | u8[idx+3]
    const v_lo = (u8[idx+4] << 24) | (u8[idx+5] << 16) | (u8[idx+6] << 8) | u8[idx+7]
    const u64 = (v_lo >>> 0) + 0x100000000*(v_hi >>> 0)
    return u64

  float16(u8) ::
    return {'@f2': u8}
  float32(u8, idx=u8.byteOffset) ::
    return new DataView(u8.buffer, idx, 4).getFloat32(0)
  float64(u8, idx=u8.byteOffset) ::
    return new DataView(u8.buffer, idx, 8).getFloat64(0)

  bytes(u8) :: return u8
  bytes_stream: build_bytes

  utf8(u8) :: return u8_to_utf8(u8)
  utf8_stream: build_utf8


  empty_list() :: return []
  list: build_Array
  list_stream: build_Array

  empty_map() :: return {}
  map: build_Obj
  map_stream: build_Obj



function _with_result(res, fn, done) ::
  fn = fn.bind(res)
  fn.res = res
  if undefined !== done ::
    fn.done = done
  return fn

function _obj_push(i, v) :: this.push(v)
function _bytes_done() ::
  const res = this.res; this.res = null
  return u8_concat(res)

function build_bytes(ctx) ::
  return _with_result @ [], _obj_push, _bytes_done

function _utf8_done() ::
  const res = this.res; this.res = null
  return res.join('')
function build_utf8(ctx) ::
  return _with_result @ [], _obj_push, _utf8_done



function _obj_set(k, v) :: this[k] = v

function build_Obj(ctx) ::
  return _with_result @ {}, _obj_set

function build_Array(ctx, len) ::
  const res = len ? new Array(len) : []
  return _with_result @ res, _obj_set


export const decode_Map = @{}
  empty_map: () => new Map()
  map: build_Map
  map_stream: build_Map

function _map_set(k, v) :: this.set(k, v)
function build_Map(ctx) ::
  return _with_result @ new Map(), _map_set


export const decode_Set = @{}
  empty_list: () => new Set()
  list: build_Set
  list_stream: build_Set

function _set_add(k, v) :: this.add(v)
function build_Set(ctx) ::
  return _with_result @ new Set(), _set_add

