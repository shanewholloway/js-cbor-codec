import { u8_to_utf8, u8_concat } from '../u8_utils.jsy'
import { cbor_accum } from '../sym_cbor.jsy'

export const decode_types = /* #__PURE__ */ @{}
  __proto__: null

  u32(u8, idx) ::
    const u32 = (u8[idx] << 24) | (u8[idx+1] << 16) | (u8[idx+2] << 8) | u8[idx+3]
    return u32 >>> 0 // unsigned int32

  u64(u8, idx) ::
    const v_hi = (u8[idx] << 24) | (u8[idx+1] << 16) | (u8[idx+2] << 8) | u8[idx+3]
    const v_lo = (u8[idx+4] << 24) | (u8[idx+5] << 16) | (u8[idx+6] << 8) | u8[idx+7]
    const u64 = (v_lo >>> 0) + 0x100000000*(v_hi >>> 0)
    return u64

  float16(u8) ::
    return {'@f2': u8}
  float32(u8, idx=u8.byteOffset) ::
    return new DataView(u8.buffer, idx, 4).getFloat32(0)
  float64(u8, idx=u8.byteOffset) ::
    return new DataView(u8.buffer, idx, 8).getFloat64(0)

  bytes(u8) :: return u8
  bytes_stream:
    cbor_accum @:
      init: () => []
      accum: _res_push
      done: res => u8_concat(res)

  utf8(u8) :: return u8_to_utf8(u8)
  utf8_stream:
    cbor_accum @:
      init: () => []
      accum: _res_push
      done: res => res.join('')


  list:
    cbor_accum @:
      init: () => []
      accum: _res_attr

  list_stream() ::
    return this.list()


  map:
    cbor_accum @:
      init: () => ({})
      accum: _res_attr

  map_stream() ::
    return this.map()


function _res_push(res,i,v) :: res.push(v)
function _res_attr(res,k,v) :: res[k] = v

