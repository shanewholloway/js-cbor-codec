import { CBOREncoder } from './cbor_encode.jsy'

class CBOREncoderFull extends CBOREncoder ::
  bind_encode_object(ctx, lut_types) ::
    const lut_encoders = this._encoder_map

    return enc_obj$full

    function enc_obj$full(v, ctx) ::
      :: // Lookup .toCBOR and .toJSON extension points
        if 'function' === typeof v.toCBOR ::
          v.toCBOR(ctx, v)
          return true

        if 'function' === typeof v.toJSON ::
          ctx.encode @ v.toJSON()
          return true

        if 'function' === typeof constructor.toCBOR ::
          constructor.toCBOR(ctx, v)
          return true


      // Lookup encoder based on constructor
      let encoder = lut_encoders.get(constructor)
      if undefined !== encoder ::
        encoder(v, ctx)
        return true

      // Lookup encoder based on prototype chain
      for let vp = objProtoOf(v); vp !== null; vp = objProtoOf(vp) ::
        encoder = lut_encoders.get(vp)
        if undefined !== encoder ::
          encoder(v, ctx)
          return true


      // Iterables become indefinite CBOR arrays
      if undefined !== v[Symbol.iterator] ::
        array_stream(v)
        return true

      ctx.object_pairs(v)
      return true

