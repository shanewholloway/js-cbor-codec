import { u8_as_stream, as_u8_buffer, u8_concat } from '../u8_utils.jsy'
import { cbor_eoc_sym, cbor_done_sym } from '../sym_cbor.jsy'
import { U8DecodeBaseCtx } from '../decode_common/u8ctx.jsy'

async function * _aiter_move_stream(u8_stream) ::
  let n = yield
  let i0=0, i1=n
  let u8_tail

  for await let u8 of u8_stream ::
    u8 = as_u8_buffer(u8)
    if u8_tail ::
      u8 = u8_concat([u8_tail, u8])
      u8_tail = void 0

    while i1 <= u8.byteLength ::
      n = yield u8.subarray(i0, i1)
      i0 = i1; i1 += n

    u8_tail = i0 >= u8.byteLength ? void 0
      : u8.subarray(i0)
    i0 = 0; i1 = n


export class U8AsyncDecodeCtx extends U8DecodeBaseCtx ::
  static bind_decode_api(decoder) ::
    decoder.decode_stream = (u8_stream) =>
      this.from_u8_stream(u8_stream, decoder.types)
        .decode_cbor()

    decoder.aiter_decode_stream = (u8_stream) =>
      this.from_u8_stream(u8_stream, decoder.types)
        .aiter_decode_cbor()


  static from_u8(u8, types) ::
    return this.from_u8_stream(u8_as_stream(u8), types)

  static get from_u8_stream() ::
    const inst0 = new this()

    return (u8_stream, types) => ::
      let u8_aiter = _aiter_move_stream(u8_stream)
      u8_aiter.next() // prime the async generator

      const inst = @{}
        __proto__: inst0
        _apply_overlay: inst0._overlay_noop
        u8_aiter

      if types && types !== inst0.types ::
        inst.types = types

      return inst

  static bind_next_value(jmp, unknown) ::
    if null == unknown ::
      unknown = this._error_unknown

    return async function next_value() ::
      const doneTypes = this._apply_overlay()

      const [type_b] = await this.move_stream(1, cbor_done_sym)
      const decode = jmp[type_b] || unknown
      const res = await decode(this, type_b)

      return undefined === doneTypes
        ? res : await doneTypes(res)


  async decode_cbor() ::
    try ::
      return await this.next_value()
    catch e ::
      throw cbor_done_sym !== e ? e
        : new Error @ `End of content`


  async *aiter_decode_cbor() ::
    try ::
      while 1 ::
        yield await this.next_value()
    catch e ::
      if cbor_done_sym !== e ::
        throw e


  async move_stream(count_bytes, eoc_sym=cbor_eoc_sym) ::
    let tip = await this.u8_aiter.next(count_bytes)
    if tip.done :: throw eoc_sym
    return tip.value

