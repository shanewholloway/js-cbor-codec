import { cbor_break_sym, cbor_tag } from '../sym_cbor.jsy'
import { _cbor_jmp_base } from '../decode_common/jump.jsy'
export * from '../decode_common/jump.jsy'

export const _cbor_jmp_async = @{}
  __proto__: _cbor_jmp_base

  // cbor size/value interpreters
  cbor_tiny(as_type) ::
    return function w0_as(ctx, type_b) ::
      return as_type @ ctx, type_b & 0x1f

  cbor_w1(as_type) ::
    return async function w1_as(ctx) ::
      const u8 = await ctx.move_stream(1)
      return as_type @ ctx, u8[0]

  cbor_w2(as_type) ::
    return async function w2_as(ctx) ::
      const u8 = await ctx.move_stream(2)
      return as_type @ ctx, (u8[0] << 8) | u8[1]

  cbor_w4(as_type) ::
    return async function w4_as(ctx) ::
      const u8 = await ctx.move_stream(4)
      return as_type @ ctx, ctx.types.u32(u8, 0)

  cbor_w8(as_type) ::
    return async function w8_as(ctx) ::
      const u8 = await ctx.move_stream(8)
      return as_type @ ctx, ctx.types.u64(u8, 0)


  // basic types

  async as_bytes(ctx, len) ::
    const u8 = await ctx.move_stream(len)
    return ctx.types.bytes @
      u8.subarray(0, len)

  async as_utf8(ctx, len) ::
    const u8 = await ctx.move_stream(len)
    return ctx.types.utf8 @
      u8.subarray(0, len)

  async as_list(ctx, len) ::
    const {res, accum, done} = ctx.types.list(len)
    for let i=0; i<len; i++ ::
      accum @ res, i, await ctx.next_value()

    return undefined !== done ? done(res) : res

  async as_map(ctx, len) ::
    const {res, accum, done} = ctx.types.map(len)
    for let i=0; i<len; i++ ::
      const key = await ctx.next_value()
      const value = await ctx.next_value()
      accum @ res, key, value

    return undefined !== done ? done(res) : res


  // streaming

  async as_stream(ctx, {res, accum, done}) ::
    let i = 0
    while true ::
      const value = await ctx.next_value()
      if cbor_break_sym === value ::
        return undefined !== done ? done(res) : res

      accum @ res, i++, value

  async as_pair_stream(ctx, {res, accum, done}) ::
    while true ::
      const key = await ctx.next_value()
      if cbor_break_sym === key ::
        return undefined !== done ? done(res) : res

      accum @ res, key, await ctx.next_value()


  // floating point primitives

  async as_float16(ctx) ::
    return ctx.types.float16 @
      await ctx.move_stream(2)

  async as_float32(ctx) ::
    return ctx.types.float32 @
      await ctx.move_stream(4)

  async as_float64(ctx) ::
    return ctx.types.float64 @
      await ctx.move_stream(8)


  // tag values

  bind_tag_dispatch(tags_lut) ::
    if 'function' !== typeof tags_lut.get ::
      throw new TypeError @ 'Expected a tags Map'

    return async function as_tag(ctx, tag) ::
      const tag_handler = tags_lut.get(tag)
      if tag_handler ::
        const res = await tag_handler(ctx, tag)
        if 'object' === typeof res ::
          return res.custom_tag(ctx, tag)

        const body = await ctx.next_value()
        return undefined === res ? body : res(body)

      return cbor_tag.from(tag, await ctx.next_value())

