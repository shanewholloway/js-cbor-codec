import { use_encoder_for } from './jump.jsy'

export class CBOREncoderBasic ::
  static get create() ::
    return stream => new this(stream)
  static get encode() ::
    return new this().encode
  static get encode_stream() ::
    return stream => new this(stream).encode

  constructor(stream) ::
    this.encode = this._bind_u8ctx(stream)

  _bind_u8ctx(stream) ::
    let encode = _bind_encoder_context @
      stream, this._ctx_encode || ctx_encode_sync
    return encode.rebind(this)

  rebind() ::
    this.encode.rebind(this)
    return this

  with_tag(tag) :: return noop

  encoder_map() ::
    if ! Object.hasOwnProperty(this, '_encoder_map') ::
      this._encoder_map = new Map(this._encoder_map)
      this.rebind()
    return this._encoder_map

  simple_map() ::
    if ! Object.hasOwnProperty(this, '_simple_map') ::
      this._simple_map = new Map(this._simple_map)
      this.rebind()
    return this._simple_map

  static with_encoders(...args) ::
    this.prototype.with_encoders(fn_block, true)
    return this

  with_encoders(fn_block, skip_rebind) ::
    let enc_map = this._encoder_map = new Map(this._encoder_map)
    let add_encoder = use_encoder_for.bind(null, enc_map)
    fn_block(add_encoder, this)
    return skip_rebind ? this
      : this.rebind()


CBOREncoderBasic.prototype._encoder_map = new Map()
function noop() {}

